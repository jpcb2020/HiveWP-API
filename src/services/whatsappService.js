// Garantir que o polyfill de crypto foi carregado
require('../utils/crypto-polyfill');

// Carregar configura√ß√µes de produ√ß√£o automaticamente se NODE_ENV=production
let productionConfig = {};
if (process.env.NODE_ENV === 'production') {
  try {
    productionConfig = require('../config/production');
    console.log('üìà Configura√ß√µes de produ√ß√£o carregadas - Sistema otimizado para 100+ inst√¢ncias');
  } catch (error) {
    console.warn('‚ö†Ô∏è  N√£o foi poss√≠vel carregar configura√ß√µes de produ√ß√£o:', error.message);
  }
}

const { default: makeWASocket, 
  DisconnectReason, 
  useMultiFileAuthState,
  fetchLatestBaileysVersion,
  makeCacheableSignalKeyStore,
  downloadContentFromMessage
} = require('@whiskeysockets/baileys');
const pino = require('pino');
const fs = require('fs');
const path = require('path');
const qrcode = require('qrcode');
const { cache } = require('./cacheService');
const { webhookQueue } = require('./webhookQueue');
const { SocksProxyAgent } = require('socks-proxy-agent');
const { HttpsProxyAgent } = require('https-proxy-agent');

// Objeto para armazenar m√∫ltiplas inst√¢ncias
const instances = {};

// Diret√≥rio para armazenar as sess√µes
const SESSION_DIR = process.env.SESSION_DIR || './sessions';

// Verificar se o diret√≥rio de sess√µes existe, se n√£o, criar
if (!fs.existsSync(SESSION_DIR)) {
  fs.mkdirSync(SESSION_DIR, { recursive: true });
}

// Nome do arquivo que armazena metadados da inst√¢ncia
const INSTANCE_METADATA_FILE = 'instance_metadata.json';

// Controle de frequ√™ncia para salvamento de metadados
const metadataLastSaved = new Map(); // Armazena o timestamp do √∫ltimo salvamento por clientId
const metadataCache = new Map(); // Cache do √∫ltimo estado salvo para compara√ß√£o

// Tempo m√≠nimo entre salvamentos consecutivos (em ms)
const METADATA_SAVE_THROTTLE = 5000; // 5 segundos

// Estados importantes que sempre devem ser salvos, independente do throttling
const CRITICAL_STATES = ['created', 'waiting_scan', 'connected', 'disconnected', 'logged_out'];

// Cache para armazenar resultados de verifica√ß√£o de n√∫meros (para evitar verifica√ß√µes repetidas)
const numberVerificationCache = new Map();
// Tempo de expira√ß√£o do cache em milissegundos (2 horas)
const CACHE_EXPIRATION = 2 * 60 * 60 * 1000;
// N√∫mero m√°ximo de entradas no cache (para prevenir uso excessivo de mem√≥ria)
const MAX_CACHE_SIZE = 10000;
// Contador de opera√ß√µes para limpar o cache a cada N opera√ß√µes (ao inv√©s de usar timer)
let cacheOperationCounter = 0;
// Frequ√™ncia de limpeza (a cada 1000 opera√ß√µes)
const CACHE_CLEANUP_FREQUENCY = 1000;

// Configura√ß√£o global para ignorar grupos (pode ser sobrescrita por inst√¢ncia)
const DEFAULT_IGNORE_GROUPS = process.env.IGNORE_GROUPS === 'true' || false;

/**
 * Cria um agente proxy baseado na URL fornecida
 * @param {string} proxyUrl - URL do proxy (ex: socks5://user:pass@host:port ou http://host:port)
 * @returns {Agent|null} Agente proxy configurado ou null se inv√°lido
 */
const createProxyAgent = (proxyUrl) => {
  if (!proxyUrl) return null;
  
  try {
    const url = new URL(proxyUrl);
    
    // Suporte para proxies SOCKS (socks4, socks5)
    if (url.protocol === 'socks4:' || url.protocol === 'socks5:') {
      console.log(`Configurando proxy SOCKS: ${url.protocol}//[REDACTED]@${url.hostname}:${url.port}`);
      return new SocksProxyAgent(proxyUrl);
    }
    
    // Suporte para proxies HTTP/HTTPS
    if (url.protocol === 'http:' || url.protocol === 'https:') {
      console.log(`Configurando proxy HTTP: ${url.protocol}//[REDACTED]@${url.hostname}:${url.port}`);
      return new HttpsProxyAgent(proxyUrl);
    }
    
    console.warn(`Protocolo de proxy n√£o suportado: ${url.protocol}`);
    return null;
  } catch (error) {
    console.error('Erro ao criar agente proxy:', error.message);
    return null;
  }
};

/**
 * Limpa entradas antigas do cache - executado apenas ocasionalmente
 * para manter desempenho m√°ximo
 */
const cleanExpiredCacheEntries = () => {
  // S√≥ executar a limpeza ocasionalmente para manter desempenho
  if (++cacheOperationCounter % CACHE_CLEANUP_FREQUENCY !== 0) return;
  
  // Se o cache estiver pequeno, n√£o vale a pena limpar
  if (numberVerificationCache.size < MAX_CACHE_SIZE / 2) return;
  
  const now = Date.now();
  for (const [key, entry] of numberVerificationCache.entries()) {
    if (now - entry.timestamp > CACHE_EXPIRATION) {
      numberVerificationCache.delete(key);
    }
  }
};

/**
 * Salva os metadados de uma inst√¢ncia para persist√™ncia
 * @param {string} clientId - ID da inst√¢ncia
 * @param {object} metadata - Dados a serem salvos
 * @param {boolean} force - For√ßar salvamento, ignorando throttling
 */
const saveInstanceMetadata = (clientId, metadata = {}, force = false) => {
  try {
    const now = Date.now();
    const lastSaved = metadataLastSaved.get(clientId) || 0;
    const timeSinceLastSave = now - lastSaved;
    const hasCriticalChange = metadata.status && CRITICAL_STATES.includes(metadata.status);
    
    // Verificar se devemos pular este salvamento devido ao throttling
    if (!force && !hasCriticalChange && timeSinceLastSave < METADATA_SAVE_THROTTLE) {
      // Salvar apenas em mem√≥ria para uso posterior
      const cachedData = metadataCache.get(clientId) || {};
      metadataCache.set(clientId, { ...cachedData, ...metadata });
      return;
    }
    
    const sessionPath = path.join(SESSION_DIR, clientId);
    
    // Criar diret√≥rio da sess√£o se n√£o existir
    if (!fs.existsSync(sessionPath)) {
      fs.mkdirSync(sessionPath, { recursive: true });
    }
    
    // Combinar metadata existente com os novos dados
    let existingData = {};
    const metadataPath = path.join(sessionPath, INSTANCE_METADATA_FILE);
    
    if (fs.existsSync(metadataPath)) {
      try {
        existingData = JSON.parse(fs.readFileSync(metadataPath, 'utf8'));
      } catch (err) {
        console.error(`[${clientId}] Erro ao ler metadados existentes:`, err);
      }
    }
    
    // Incluir qualquer dado em cache que n√£o foi salvo devido ao throttling
    const cachedData = metadataCache.get(clientId) || {};
    
    // Mesclar dados e salvar
    const combinedData = {
      ...existingData,
      ...cachedData, // Dados em cache pendentes
      ...metadata,    // Dados atuais
      lastUpdated: new Date().toISOString()
    };
    
    // Verificar se h√° mudan√ßas significativas comparando com o √∫ltimo estado salvo
    const lastPersistedData = JSON.stringify(existingData);
    const newData = JSON.stringify(combinedData);
    
    if (force || lastPersistedData !== newData) {
      fs.writeFileSync(
        metadataPath,
        JSON.stringify(combinedData, null, 2)
      );
      
      // Atualizar timestamp do √∫ltimo salvamento e limpar cache
      metadataLastSaved.set(clientId, now);
      metadataCache.set(clientId, {});
      
      // Reduzir verbosidade do log para estados n√£o cr√≠ticos
      if (hasCriticalChange || force) {
        console.log(`[${clientId}] Metadados da inst√¢ncia salvos`);
      }
    }
  } catch (error) {
    console.error(`[${clientId}] Erro ao salvar metadados:`, error);
  }
};

/**
 * L√™ os metadados de uma inst√¢ncia
 * @param {string} clientId - ID da inst√¢ncia
 * @returns {object} Metadados da inst√¢ncia
 */
const readInstanceMetadata = (clientId) => {
  try {
    const metadataPath = path.join(SESSION_DIR, clientId, INSTANCE_METADATA_FILE);
    
    if (fs.existsSync(metadataPath)) {
      return JSON.parse(fs.readFileSync(metadataPath, 'utf8'));
    }
  } catch (error) {
    console.error(`[${clientId}] Erro ao ler metadados:`, error);
  }
  
  return null;
};

/**
 * Verifica se uma inst√¢ncia existe (mesmo sem estar conectada)
 * @param {string} clientId - ID da inst√¢ncia
 * @returns {boolean} Verdadeiro se a inst√¢ncia existir
 */
const instanceExists = (clientId) => {
  const sessionPath = path.join(SESSION_DIR, clientId);
  const metadataPath = path.join(sessionPath, INSTANCE_METADATA_FILE);
  
  return fs.existsSync(metadataPath);
};

/**
 * Carrega todas as inst√¢ncias existentes na pasta de sess√µes
 */
const loadExistingSessions = async () => {
  try {
    // Ler os diret√≥rios dentro da pasta de sess√µes
    const sessionDirs = fs.readdirSync(SESSION_DIR, { withFileTypes: true })
      .filter(dirent => dirent.isDirectory())
      .map(dirent => dirent.name);
    
    console.log(`Encontradas ${sessionDirs.length} sess√µes existentes:`, sessionDirs);
    
    // Inst√¢ncias carregadas com sucesso
    const loadedInstances = [];
    
    // Inicializar cada inst√¢ncia encontrada
    for (const clientId of sessionDirs) {
      // Verificar se h√° metadados da inst√¢ncia
      if (instanceExists(clientId)) {
        console.log(`Carregando inst√¢ncia: ${clientId}`);
        
        try {
          // Inicializar a conex√£o do WhatsApp para esta inst√¢ncia
          await initializeWhatsApp(clientId);
          loadedInstances.push(clientId);
          console.log(`Inst√¢ncia ${clientId} reconectada com sucesso`);
        } catch (error) {
          console.error(`Erro ao reconectar inst√¢ncia ${clientId}:`, error);
        }
      }
    }
    
    return loadedInstances;
  } catch (error) {
    console.error('Erro ao carregar sess√µes existentes:', error);
    return [];
  }
};

/**
 * Retorna a lista de inst√¢ncias ativas
 */
const getActiveInstances = () => {
  return Object.keys(instances).map(id => ({
    id,
    connected: instances[id]?.isConnected || false,
    status: instances[id]?.connectionStatus || 'disconnected',
    config: {
      ignoreGroups: instances[id]?.ignoreGroups || false,
      webhookUrl: instances[id]?.webhookUrl || '',
      proxyUrl: instances[id]?.proxyUrl || ''
    }
  }));
};

/**
 * Inicializa a conex√£o com o WhatsApp para um cliente espec√≠fico
 * @param {string} clientId - Identificador √∫nico do cliente
 * @param {object} options - Op√ß√µes de configura√ß√£o adicionais
 */
const initializeWhatsApp = async (clientId = 'default', options = {}) => {
  try {
    // Criar diret√≥rio espec√≠fico para o cliente se n√£o existir
    const SESSION_PATH = path.join(SESSION_DIR, clientId);
    if (!fs.existsSync(SESSION_PATH)) {
      fs.mkdirSync(SESSION_PATH, { recursive: true });
    }
    
    // Ler metadados existentes da inst√¢ncia
    const metadata = readInstanceMetadata(clientId) || {};
    
    // Obter as credenciais salvas
    const { state, saveCreds } = await useMultiFileAuthState(SESSION_PATH);
    
    // Buscar a vers√£o mais recente do Baileys
    const { version } = await fetchLatestBaileysVersion();

    // Inicializar o objeto de inst√¢ncia se n√£o existir
    if (!instances[clientId]) {
      instances[clientId] = {
        sock: null,
        qrText: '',
        isConnected: false,
        connectionStatus: 'disconnected',
        ignoreGroups: options.ignoreGroups !== undefined ? options.ignoreGroups : (metadata.ignoreGroups || DEFAULT_IGNORE_GROUPS),
        webhookUrl: options.webhookUrl || metadata.webhookUrl || '',
        proxyUrl: options.proxyUrl || metadata.proxyUrl || '',
        created: metadata.created || new Date().toISOString()
      };
    } else {
      // Atualizar configura√ß√µes se fornecidas
      if (options.ignoreGroups !== undefined) {
        instances[clientId].ignoreGroups = options.ignoreGroups;
      }
      if (options.webhookUrl !== undefined) {
        instances[clientId].webhookUrl = options.webhookUrl;
      }
      if (options.proxyUrl !== undefined) {
        instances[clientId].proxyUrl = options.proxyUrl;
      }
    }
    
    // Configurar proxy se fornecido
    let proxyAgent = null;
    if (instances[clientId].proxyUrl) {
      proxyAgent = createProxyAgent(instances[clientId].proxyUrl);
      if (proxyAgent) {
        console.log(`[${clientId}] Proxy configurado com sucesso`);
      } else {
        console.warn(`[${clientId}] Falha ao configurar proxy: ${instances[clientId].proxyUrl}`);
      }
    }
    
    // Salvar metadados logo que a inst√¢ncia √© criada/atualizada
    saveInstanceMetadata(clientId, {
      ignoreGroups: instances[clientId].ignoreGroups,
      webhookUrl: instances[clientId].webhookUrl,
      proxyUrl: instances[clientId].proxyUrl,
      created: instances[clientId].created,
      status: 'created'
    });

    // Configura√ß√£o de logger personalizada para reduzir ru√≠do no terminal
    const logger = pino({
      level: process.env.BAILEYS_LOG_LEVEL || 'warn',  // Usar 'warn' como padr√£o, mas permitir configura√ß√£o
      transport: {
        target: 'pino-pretty',
        options: {
          translateTime: 'SYS:standard',
          ignore: 'hostname,pid',
        },
      },
    });
    
    // Criar socket do WhatsApp com configura√ß√µes otimizadas
    const socketConfig = {
      version,
      logger: logger,
      printQRInTerminal: true,
      auth: {
        creds: state.creds,
        keys: makeCacheableSignalKeyStore(state.keys, logger)
      },
      browser: ['HiveWP API', 'Chrome', '104.0.0'],
      syncFullHistory: false,
      markOnlineOnConnect: false,  // Reduzir carga no servidor
      retryRequestDelayMs: 2000,   // Aumentar tempo entre tentativas
      connectTimeoutMs: 30000,     // Timeout para conex√£o inicial
      keepAliveIntervalMs: 25000,  // Manter conex√£o ativa
      emitOwnEvents: false         // Reduzir processamento de eventos
    };
    
    // Adicionar configura√ß√µes de proxy se dispon√≠vel
    if (proxyAgent) {
      socketConfig.agent = proxyAgent;      // Para conex√µes WebSocket
      socketConfig.fetchAgent = proxyAgent; // Para upload/download de m√≠dia
      console.log(`[${clientId}] Configura√ß√µes de proxy aplicadas ao socket`);
    }
    
    instances[clientId].sock = makeWASocket(socketConfig);

    const sock = instances[clientId].sock;

    // Gerenciar eventos de conex√£o
    sock.ev.on('connection.update', async (update) => {
      const { connection, lastDisconnect, qr } = update;

      // Quando o QR Code estiver dispon√≠vel
      if (qr) {
        instances[clientId].qrText = qr;
        instances[clientId].qrTimestamp = Date.now(); // Timestamp para invalidar cache
        console.log(`[${clientId}] QR Code gerado. Escaneie para se conectar.`);
        
        // Invalidar cache de QR code quando um novo √© gerado
        if (cache && cache.invalidateQRCode) {
          cache.invalidateQRCode(clientId);
        }
        
        // Atualizar status nos metadados
        saveInstanceMetadata(clientId, {
          lastQRTimestamp: new Date().toISOString(),
          status: 'waiting_scan'
        });
      }

      // Quando o status de conex√£o mudar
      if (connection) {
        instances[clientId].connectionStatus = connection;
        console.log(`[${clientId}] Status de conex√£o:`, connection);
        
        // Se estiver conectado
        if (connection === 'open') {
          instances[clientId].isConnected = true;
          
          // Resetar tentativas de reconex√£o
          instances[clientId].reconnectAttempts = 0;
          
          console.log(`[${clientId}] üéâ Conectado com sucesso ao WhatsApp!`);
          
          // Atualizar status nos metadados com for√ßa para notificar mudan√ßa imediata
          saveInstanceMetadata(clientId, {
            status: 'connected',
            lastConnection: new Date().toISOString(),
            connectionEstablished: true,
            autoReinitializing: false // Limpar flag de auto-reinicializa√ß√£o
          }, true); // For√ßar salvamento imediato
        }
        
        // Se desconectado
        if (connection === 'close') {
          instances[clientId].isConnected = false;
          
          // Atualizar status nos metadados
          saveInstanceMetadata(clientId, {
            status: 'disconnected',
            lastDisconnection: new Date().toISOString()
          });
          
          // Verificar o motivo da desconex√£o
          const statusCode = lastDisconnect?.error?.output?.statusCode;
          
          // Se foi logout expl√≠cito, seguir fluxo normal de logout
          if (statusCode === DisconnectReason.loggedOut) {
            console.log(`[${clientId}] Desconectado do WhatsApp (logout).`);
            
            // Salvar configura√ß√µes atuais antes da limpeza
            const currentConfig = {
              ignoreGroups: instances[clientId].ignoreGroups,
              webhookUrl: instances[clientId].webhookUrl,
              proxyUrl: instances[clientId].proxyUrl
            };
            
            // Atualizar metadados para indicar logout
            saveInstanceMetadata(clientId, {
              status: 'logged_out',
              logoutTime: new Date().toISOString(),
              logoutType: 'automatic'
            });
            
            // Remover apenas os arquivos de credenciais, preservando metadados
            const SESSION_PATH = path.join(SESSION_DIR, clientId);
            const credsPath = path.join(SESSION_PATH, 'creds.json');
            if (fs.existsSync(credsPath)) {
              console.log(`[${clientId}] Removendo apenas credenciais, preservando metadados.`);
              fs.unlinkSync(credsPath);
            }
            
            // Remover arquivos de chave para evitar problemas de autentica√ß√£o
            const authFilesPattern = /auth|pre-key|session|sender|app-state/;
            if (fs.existsSync(SESSION_PATH)) {
            const files = fs.readdirSync(SESSION_PATH);
            for (const file of files) {
              if (authFilesPattern.test(file)) {
                fs.unlinkSync(path.join(SESSION_PATH, file));
                }
              }
            }
            
            // Reinicializar automaticamente ap√≥s logout para gerar novo QR code
            console.log(`[${clientId}] Reinicializando conex√£o automaticamente ap√≥s logout...`);
            setTimeout(async () => {
              try {
                if (instances[clientId]) {
                  await initializeWhatsApp(clientId, currentConfig);
                  console.log(`[${clientId}] Nova conex√£o inicializada ap√≥s logout autom√°tico`);
                }
              } catch (error) {
                console.error(`[${clientId}] Erro ao reinicializar ap√≥s logout autom√°tico:`, error);
              }
            }, 2000); // Aguardar 2 segundos antes de reinicializar
          }
          
          // Para outros tipos de desconex√£o (incluindo QR code expirado)
          else {
            // Salvar configura√ß√µes atuais para manter ap√≥s reinicializa√ß√£o
            const currentConfig = {
              ignoreGroups: instances[clientId].ignoreGroups,
              webhookUrl: instances[clientId].webhookUrl,
              proxyUrl: instances[clientId].proxyUrl
            };
            
            // Verificar se n√£o estava conectado (indicativo de QR code expirado ou problemas de conex√£o)
            const wasNotConnected = !instances[clientId].isConnected;
            
            // Se n√£o estava conectado, √© prov√°vel que seja QR code expirado - reinicializar imediatamente
            if (wasNotConnected) {
              console.log(`[${clientId}] QR Code provavelmente expirado. Gerando novo QR code automaticamente...`);
              
              // Atualizar status nos metadados
              saveInstanceMetadata(clientId, {
                status: 'qr_expired',
                qrExpiredTime: new Date().toISOString(),
                autoReinitializing: true
              });
              
              // Reinicializar imediatamente para gerar novo QR code
              setTimeout(async () => {
                try {
                  if (instances[clientId]) {
                    console.log(`[${clientId}] Reinicializando para gerar novo QR code...`);
                    await initializeWhatsApp(clientId, currentConfig);
                    console.log(`[${clientId}] ‚úÖ Novo QR code gerado com sucesso!`);
                  }
                } catch (error) {
                  console.error(`[${clientId}] Erro ao gerar novo QR code:`, error);
                }
              }, 1000); // Aguardar apenas 1 segundo antes de reinicializar
            } 
            
            // Se estava conectado, usar backoff exponencial para reconectar
            else {
              console.log(`[${clientId}] Conex√£o perdida. Tentando reconectar...`);
              
              // Obter tentativas de reconex√£o atuais ou iniciar com 0
              instances[clientId].reconnectAttempts = instances[clientId].reconnectAttempts || 0;
              instances[clientId].reconnectAttempts++;
              
              // C√°lculo de backoff exponencial: entre 3-10 segundos baseado no n√∫mero de tentativas
              // Limitado a no m√°ximo 5 minutos entre tentativas
              const delaySeconds = Math.min(300, Math.pow(1.5, Math.min(instances[clientId].reconnectAttempts, 10)) * 3);
              
              console.log(`[${clientId}] Reconectando em ${delaySeconds.toFixed(0)} segundos... (Tentativa ${instances[clientId].reconnectAttempts})`);
              
              // Salvar informa√ß√µes de reconex√£o nos metadados
              saveInstanceMetadata(clientId, {
                reconnectAttempts: instances[clientId].reconnectAttempts,
                nextReconnectTime: new Date(Date.now() + delaySeconds * 1000).toISOString()
              });
              
              // Agendar reconex√£o com atraso
              setTimeout(async () => {
                // Verificar se a inst√¢ncia ainda existe e precisa reconectar
                if (instances[clientId] && !instances[clientId].isConnected) {
                  try {
                    await initializeWhatsApp(clientId, currentConfig);
                  } catch (error) {
                    console.error(`[${clientId}] Erro na tentativa de reconex√£o:`, error);
                  }
                }
              }, delaySeconds * 1000);
            }
          }
        }
      }
    });

    // Salvar as credenciais quando atualizadas
    sock.ev.on('creds.update', async (creds) => {
      await saveCreds();
      
      // Atualizar status nos metadados
      saveInstanceMetadata(clientId, {
        hasCredentials: true
      });
    });
    
    // Gerenciar eventos de mensagens
    sock.ev.on('messages.upsert', async (m) => {
      const message = m.messages[0];
      
      if (!message.key.fromMe && m.type === 'notify') {
        // Verificar se √© uma mensagem de grupo (remoteJid termina com @g.us)
        const isGroupMessage = message.key.remoteJid?.endsWith('@g.us') || false;
        
        // Verificar se devemos ignorar esta mensagem de grupo
        if (isGroupMessage && instances[clientId].ignoreGroups) {
          console.log(`[${clientId}] Mensagem de grupo ignorada: ${message.key.remoteJid}`);
          return; // N√£o processa mensagens de grupo se ignoreGroups estiver ativado
        }
        
        console.log(`[${clientId}] Nova mensagem recebida:`, JSON.stringify(message, null, 2));
        
        // Simplificar estrutura da mensagem para o webhook
        const simplifiedMessage = {
          id: message.key.id,
          from: message.key.remoteJid,
          fromMe: message.key.fromMe,
          timestamp: message.messageTimestamp,
          isGroup: isGroupMessage,
          type: 'unknown'
        };
        
        // Extrair conte√∫do da mensagem
        if (message.message?.conversation) {
          // Texto simples
          simplifiedMessage.type = 'text';
          simplifiedMessage.body = message.message.conversation;
        } 
        else if (message.message?.extendedTextMessage) {
          // Texto com formata√ß√£o
          simplifiedMessage.type = 'text';
          simplifiedMessage.body = message.message.extendedTextMessage.text;
          
          // Verificar se h√° uma cita√ß√£o (mensagem respondida)
          if (message.message.extendedTextMessage.contextInfo?.quotedMessage) {
            simplifiedMessage.quotedMessage = {
              id: message.message.extendedTextMessage.contextInfo.stanzaId,
              participant: message.message.extendedTextMessage.contextInfo.participant
            };
          }
        }
        else if (message.message?.imageMessage) {
          // Imagem
          simplifiedMessage.type = 'image';
          simplifiedMessage.caption = message.message.imageMessage.caption || '';
          simplifiedMessage.mimetype = message.message.imageMessage.mimetype;
        }
        else if (message.message?.videoMessage) {
          // V√≠deo
          simplifiedMessage.type = 'video';
          simplifiedMessage.caption = message.message.videoMessage.caption || '';
          simplifiedMessage.mimetype = message.message.videoMessage.mimetype;
        }
        else if (message.message?.documentMessage) {
          // Documento
          simplifiedMessage.type = 'document';
          simplifiedMessage.fileName = message.message.documentMessage.fileName || '';
          simplifiedMessage.mimetype = message.message.documentMessage.mimetype;
        }
        else if (message.message?.audioMessage || message.message?.pttMessage) {
          // √Åudio ou PTT (mensagem de voz)
          const audioMessage = message.message.audioMessage || message.message.pttMessage;
          simplifiedMessage.type = audioMessage.ptt ? 'ptt' : 'audio';
          simplifiedMessage.seconds = audioMessage.seconds || 0;
          simplifiedMessage.mimetype = audioMessage.mimetype;
          
          try {
            console.log(`[${clientId}] Mensagem de √°udio detectada, extraindo conte√∫do...`);
            
            // Baixar o conte√∫do do √°udio
            const stream = await downloadContentFromMessage(audioMessage, 'audio');
            let buffer = Buffer.from([]);
            
            // Acumular chunks no buffer
            for await (const chunk of stream) {
              buffer = Buffer.concat([buffer, chunk]);
            }
            
            // Converter para base64
            const base64Audio = buffer.toString('base64');
            
            // Adicionar base64 √† mensagem simplificada
            simplifiedMessage.base64Audio = base64Audio;
            
            console.log(`[${clientId}] √Åudio extra√≠do e convertido para base64 com sucesso`);
          } catch (audioError) {
            console.error(`[${clientId}] Erro ao extrair √°udio:`, audioError);
            simplifiedMessage.error = 'Falha ao extrair √°udio: ' + audioError.message;
          }
        }
        else if (message.message?.locationMessage) {
          // Localiza√ß√£o
          simplifiedMessage.type = 'location';
          simplifiedMessage.latitude = message.message.locationMessage.degreesLatitude;
          simplifiedMessage.longitude = message.message.locationMessage.degreesLongitude;
        }
        else if (message.message?.contactMessage) {
          // Contato
          simplifiedMessage.type = 'contact';
          simplifiedMessage.name = message.message.contactMessage.displayName;
          simplifiedMessage.vcard = message.message.contactMessage.vcard;
        }
        else if (message.message?.reactionMessage) {
          // Rea√ß√£o
          simplifiedMessage.type = 'reaction';
          simplifiedMessage.emoji = message.message.reactionMessage.text;
          simplifiedMessage.targetMessageId = message.message.reactionMessage.key.id;
        }
        
        // Enviar para webhook, se configurado (usando queue para performance)
        if (instances[clientId].webhookUrl) {
            const webhookData = {
              clientId,
              timestamp: new Date().toISOString(),
              message: simplifiedMessage,
              originalMessage: message // Opcional: mant√©m a mensagem original para casos espec√≠ficos
            };
            
          // Usar queue ass√≠ncrona ao inv√©s de await para n√£o bloquear
          const queued = webhookQueue.enqueue(instances[clientId].webhookUrl, webhookData, clientId);
          if (!queued) {
            console.warn(`[${clientId}] Webhook queue cheia, mensagem descartada`);
          }
        }
        
        // Aqui voc√™ pode adicionar l√≥gica para processar mensagens recebidas
        // e implementar respostas autom√°ticas, etc.
      }
    });

    return sock;
  } catch (error) {
    console.error(`[${clientId}] Erro ao inicializar o WhatsApp:`, error);
    return null;
  }
};

/**
 * Fun√ß√£o para enviar dados para um webhook
 * @param {string} webhookUrl - URL do webhook
 * @param {object} data - Dados a serem enviados
 */
const sendToWebhook = async (webhookUrl, data) => {
  if (!webhookUrl) return;
  
  try {
    // Usar o m√≥dulo https ou http dependendo da URL
    const httpModule = webhookUrl.startsWith('https') ? require('https') : require('http');
    const url = new URL(webhookUrl);
    
    return new Promise((resolve, reject) => {
      const requestOptions = {
        hostname: url.hostname,
        port: url.port || (url.protocol === 'https:' ? 443 : 80),
        path: url.pathname + url.search,
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        }
      };
      
      const req = httpModule.request(requestOptions, (res) => {
        let responseData = '';
        
        res.on('data', (chunk) => {
          responseData += chunk;
        });
        
        res.on('end', () => {
          resolve({
            statusCode: res.statusCode,
            data: responseData
          });
        });
      });
      
      req.on('error', (error) => {
        console.error(`Erro ao enviar para webhook: ${error.message}`);
        reject(error);
      });
      
      req.write(JSON.stringify(data));
      req.end();
    });
  } catch (error) {
    console.error(`Erro ao processar envio para webhook: ${error.message}`);
  }
};

/**
 * Formata um n√∫mero de telefone para o formato WhatsApp (vers√£o ultra-r√°pida)
 * @param {string} phoneNumber - N√∫mero de telefone a formatar
 * @returns {string} - N√∫mero formatado
 */
const formatPhoneNumber = (phoneNumber) => {
  // Se j√° for um JID do WhatsApp, retornar como est√°
  if (phoneNumber.includes('@')) return phoneNumber;
  
  // Remover todos os caracteres n√£o num√©ricos com RegExp otimizada
  const cleaned = phoneNumber.replace(/\D/g, '');
  
  // Adicionar o sufixo do WhatsApp - sem valida√ß√µes extensivas para m√°xima velocidade
  return cleaned + '@s.whatsapp.net';
};

/**
 * Verifica se um n√∫mero est√° registrado no WhatsApp
 * @param {string} clientId - Identificador do cliente
 * @param {string} phoneNumber - N√∫mero de telefone a verificar
 * @returns {Promise<object>} - Objeto com status da verifica√ß√£o
 */
const checkNumberExists = async (clientId = 'default', phoneNumber) => {
  try {
    if (!instances[clientId]?.sock) {
      return {
        success: false,
        error: `WhatsApp do cliente ${clientId} n√£o est√° conectado`
      };
    }
    
    // Formatar o n√∫mero (ultra-r√°pido)
    const jid = formatPhoneNumber(phoneNumber);
    
    // Verificar cache otimizado primeiro
    const cachedResult = cache.getNumberValidation(clientId, jid);
    if (cachedResult) {
      // Cache hit - retorno instant√¢neo
      return cachedResult;
    }
    
    // Cache miss - fazer a verifica√ß√£o real
    const sock = instances[clientId].sock;
    const [result] = await sock.onWhatsApp(jid);
    
    const verificationResult = result?.exists 
      ? { success: true, exists: true, phoneNumber: jid, jid: result.jid }
      : { success: true, exists: false, phoneNumber: jid };
    
    // Armazenar no cache otimizado
    cache.setNumberValidation(clientId, jid, verificationResult);
    
    return verificationResult;
  } catch (error) {
    return {
      success: false,
      error: error.message || 'Erro ao verificar n√∫mero'
    };
  }
};

/**
 * Fun√ß√£o auxiliar para validar o n√∫mero antes de enviar mensagens
 * @param {string} clientId - Identificador do cliente
 * @param {string} phoneNumber - N√∫mero de telefone a validar
 */
const validatePhoneNumber = async (clientId, phoneNumber) => {
  const result = await checkNumberExists(clientId, phoneNumber);
  
  if (!result.success) {
    return result;
  }
  
  if (!result.exists) {
    return {
      success: false,
      error: `O n√∫mero ${phoneNumber} n√£o est√° registrado no WhatsApp`,
      notRegistered: true
    };
  }
  
  return { success: true, jid: result.jid };
};

/**
 * Envia uma mensagem de texto para um n√∫mero de telefone
 * @param {string} clientId - Identificador do cliente
 * @param {string} phoneNumber - N√∫mero de telefone de destino
 * @param {string} message - Mensagem de texto a ser enviada
 * @param {boolean} simulateTyping - Se true, simula digita√ß√£o antes de enviar (opcional)
 * @param {number} typingDurationMs - Dura√ß√£o da simula√ß√£o de digita√ß√£o em ms (opcional, padr√£o: 1500ms)
 */
const sendTextMessage = async (clientId = 'default', phoneNumber, message, simulateTyping = false, typingDurationMs = 1500) => {
  try {
    if (!instances[clientId]?.sock) {
      return {
        success: false,
        error: `WhatsApp do cliente ${clientId} n√£o est√° conectado`
      };
    }
    
    // Verificar se o n√∫mero existe no WhatsApp
    const validation = await validatePhoneNumber(clientId, phoneNumber);
    if (!validation.success) return validation;
    
    // Usar diretamente o JID retornado pela valida√ß√£o
    const jid = validation.jid;
    
    // Se a op√ß√£o de simular digita√ß√£o estiver ativada
    if (simulateTyping) {
      try {
        // Enviar estado de "digitando..."
        await instances[clientId].sock.sendPresenceUpdate('composing', jid);
        
        // Esperar pelo tempo especificado para simular a digita√ß√£o
        await new Promise(resolve => setTimeout(resolve, typingDurationMs));
        
        // Parar de "digitar" antes de enviar a mensagem
        await instances[clientId].sock.sendPresenceUpdate('paused', jid);
      } catch (typingError) {
        // Se houver erro na simula√ß√£o de digita√ß√£o, apenas log e continua para enviar a mensagem
        console.error(`[${clientId}] Erro ao simular digita√ß√£o:`, typingError);
      }
    }
    
    // Enviar mensagem de texto
    await instances[clientId].sock.sendMessage(jid, { text: message });
    
    return { 
      success: true, 
      message: 'Mensagem enviada com sucesso',
      withTypingSimulation: simulateTyping
    };
  } catch (error) {
    console.error(`[${clientId}] Erro ao enviar mensagem:`, error);
    return {
      success: false,
      error: error.message || 'Erro ao enviar mensagem'
    };
  }
};

/**
 * Envia uma m√≠dia (imagem, documento ou qualquer tipo de arquivo) para um n√∫mero de telefone
 * @param {string} clientId - Identificador do cliente
 * @param {string} phoneNumber - N√∫mero de telefone de destino
 * @param {string} mediaUrl - URL ou caminho local do arquivo
 * @param {string} filename - Nome do arquivo
 * @param {string} mimetype - Tipo MIME da m√≠dia (opcional)
 * @param {string} caption - Legenda opcional
 */
const sendMediaMessage = async (clientId = 'default', phoneNumber, mediaUrl, filename, mimetype, caption = '') => {
  try {
    if (!instances[clientId]?.sock) {
      return {
        success: false,
        error: `WhatsApp do cliente ${clientId} n√£o est√° conectado`
      };
    }
    
    // Verificar se o n√∫mero existe no WhatsApp
    const validation = await validatePhoneNumber(clientId, phoneNumber);
    if (!validation.success) return validation;
    
    // Usar diretamente o JID retornado pela valida√ß√£o
    const jid = validation.jid;
    
    // Verificar se a URL √© v√°lida ou se √© um caminho local (simplificado)
    if (!mediaUrl.startsWith('http') && !fs.existsSync(mediaUrl)) {
      return {
        success: false,
        error: 'URL da m√≠dia inv√°lida ou arquivo n√£o encontrado'
      };
    }
    
    // Determinar o nome do arquivo se n√£o foi especificado
    const detectedFilename = filename 
      ? decodeURIComponent(filename)
      : decodeURIComponent(mediaUrl.split('/').pop().split('?')[0] || 'arquivo');
    
    // Determinar o tipo MIME baseado na extens√£o do arquivo se n√£o foi especificado
    let detectedMimetype = mimetype;
    if (!detectedMimetype) {
      const fileExtension = detectedFilename.split('.').pop().toLowerCase();
      
      const mimeTypes = {
        'pdf': 'application/pdf',
        'doc': 'application/msword',
        'docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
        'xls': 'application/vnd.ms-excel',
        'xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        'ppt': 'application/vnd.ms-powerpoint',
        'pptx': 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
        'txt': 'text/plain',
        'csv': 'text/csv',
        'mp3': 'audio/mpeg',
        'mp4': 'video/mp4',
        'jpg': 'image/jpeg',
        'jpeg': 'image/jpeg',
        'png': 'image/png',
        'gif': 'image/gif',
        'zip': 'application/zip',
        'rar': 'application/x-rar-compressed',
        'json': 'application/json',
        'xml': 'application/xml'
      };
      
      detectedMimetype = mimeTypes[fileExtension] || 'application/octet-stream';
    }
    
    let messageOptions;
    let mediaType = 'document'; // Tipo padr√£o
    
    // Identificar o tipo de m√≠dia para enviar com o m√©todo mais apropriado
    if (detectedMimetype.startsWith('image/')) {
      // √â uma imagem
      messageOptions = {
        image: { url: mediaUrl },
        caption: caption || undefined
      };
      mediaType = 'imagem';
    } else if (detectedMimetype.startsWith('video/')) {
      // √â um v√≠deo
      messageOptions = {
        video: { url: mediaUrl },
        caption: caption || undefined,
        fileName: detectedFilename
      };
      mediaType = 'v√≠deo';
    } else if (detectedMimetype.startsWith('audio/')) {
      // √â um √°udio
      messageOptions = {
        audio: { url: mediaUrl },
        mimetype: detectedMimetype,
        fileName: detectedFilename
      };
      mediaType = '√°udio';
    } else {
      // Outros tipos como documento
      messageOptions = {
        document: { url: mediaUrl },
        mimetype: detectedMimetype,
        fileName: detectedFilename,
        caption: caption || undefined
      };
      
      // Adicionar configura√ß√µes especiais para PDFs para garantir o preview
      if (detectedMimetype === 'application/pdf') {
        messageOptions.jpegThumbnail = null; // O Baileys vai gerar um thumbnail automaticamente
      }
    }
    
    // Enviar a mensagem
    await instances[clientId].sock.sendMessage(jid, messageOptions);
    
    return {
      success: true,
      message: `${mediaType} enviada com sucesso`,
      type: detectedMimetype,
      filename: detectedFilename
    };
  } catch (error) {
    console.error(`[${clientId}] Erro ao enviar m√≠dia:`, error);
    return {
      success: false,
      error: error.message || 'Erro ao enviar m√≠dia'
    };
  }
};

/**
 * Envia uma mensagem de √°udio para um n√∫mero de telefone
 * @param {string} clientId - Identificador do cliente
 * @param {string} phoneNumber - N√∫mero de telefone de destino
 * @param {string} audioUrl - URL ou caminho local do arquivo de √°udio
 * @param {string} caption - Legenda opcional para o √°udio
 * @param {string} mimetype - Tipo MIME opcional (se n√£o fornecido, ser√° detectado automaticamente)
 */
const sendAudioMessage = async (clientId = 'default', phoneNumber, audioUrl, caption = '', mimetype = null) => {
  try {
    if (!instances[clientId]?.sock) {
      return {
        success: false,
        error: `WhatsApp do cliente ${clientId} n√£o est√° conectado`
      };
    }
    
    // Verificar se o n√∫mero existe no WhatsApp
    const validation = await validatePhoneNumber(clientId, phoneNumber);
    if (!validation.success) return validation;
    
    // Usar diretamente o JID retornado pela valida√ß√£o
    const jid = validation.jid;
    
    // Determinar se √© URL ou arquivo local com verifica√ß√£o r√°pida
    const isUrl = audioUrl.startsWith('http') && (audioUrl.includes('://'));
    let buffer;
    
    // Obter o buffer da m√≠dia (otimizado para velocidade)
    if (isUrl) {
      try {
        const response = await fetch(audioUrl);
        if (!response.ok) {
          throw new Error(`Falha ao baixar √°udio: ${response.status}`);
        }
        buffer = await response.arrayBuffer();
        buffer = Buffer.from(buffer);
      } catch (fetchError) {
        return {
          success: false,
          error: `Erro ao baixar √°udio: ${fetchError.message}`
        };
      }
    } else {
      try {
        // Verifica√ß√£o de exist√™ncia sem try-catch para melhor performance
        if (!fs.existsSync(audioUrl)) {
          return {
            success: false,
            error: `Arquivo de √°udio n√£o encontrado: ${audioUrl}`
          };
        }
        // Leitura direta do arquivo para o buffer
        buffer = fs.readFileSync(audioUrl);
      } catch (fsError) {
        return {
          success: false,
          error: `Erro ao ler arquivo de √°udio: ${fsError.message}`
        };
      }
    }
    
    // Verifica√ß√£o ultra-r√°pida de buffer
    if (!buffer?.length) {
      return {
        success: false,
        error: 'Buffer de √°udio vazio ou inv√°lido'
      };
    }
    
    // Detectar o tipo MIME baseado na extens√£o do arquivo (mapeamento pr√©-definido para performance)
    if (!mimetype) {
      const extension = audioUrl.split('.').pop().toLowerCase();
      
      // Mapeamento de extens√µes para tipos MIME (padr√µes web otimizados para compatibilidade)
      const mimeTypes = {
        'mp3': 'audio/mpeg',
        'm4a': 'audio/mp4',
        'aac': 'audio/aac',
        'ogg': 'audio/ogg',
        'opus': 'audio/opus',
        'wav': 'audio/wav',
        'flac': 'audio/flac',
        'webm': 'audio/webm'
      };
      
      mimetype = mimeTypes[extension] || 'audio/mpeg';
    }
    
    // Enviar o √°udio com configura√ß√£o m√≠nima necess√°ria para m√°xima performance
    const messageResponse = await instances[clientId].sock.sendMessage(jid, {
      audio: buffer,
      ptt: true,
      mimetype
    });
    
    // Resposta otimizada com informa√ß√µes essenciais
    return {
      success: true,
      message: '√Åudio enviado com sucesso',
      format: mimetype,
      messageId: messageResponse?.key?.id
    };
  } catch (error) {
    console.error(`[${clientId}] Erro ao enviar √°udio:`, error);
    return {
      success: false,
      error: error.message || 'Erro ao enviar √°udio'
    };
  }
};

/**
 * Gera uma URL do QR Code como string base64 para um cliente espec√≠fico
 * @param {string} clientId - Identificador do cliente
 */
const getQrCode = async (clientId = 'default') => {
  try {
    if (!instances[clientId] || !instances[clientId].qrText) {
      // Verificar se a inst√¢ncia existe mas n√£o tem QR code (pode estar reconectando)
      if (instances[clientId] && instances[clientId].connectionStatus === 'close') {
        return {
          success: false,
          error: `QR Code expirado. Sistema gerando novo QR code automaticamente...`,
          status: 'auto_generating',
          autoRenewing: true
        };
      }
      
      return {
        success: false,
        error: `QR Code para o cliente ${clientId} n√£o dispon√≠vel no momento`
      };
    }
    
    // Gerar QR Code como base64 (sempre fresh, sem cache)
    const qrBase64 = await qrcode.toDataURL(instances[clientId].qrText);
    
    // Verificar se o QR code foi recentemente renovado automaticamente
    const metadata = readInstanceMetadata(clientId);
    const wasAutoRenewed = metadata.status === 'qr_expired' && metadata.autoReinitializing;
    
    return {
      success: true,
      qrCode: qrBase64,
      status: instances[clientId].connectionStatus,
      clientId,
      timestamp: instances[clientId].qrTimestamp || Date.now(),
      isConnected: instances[clientId].isConnected || false,
      autoRenewed: wasAutoRenewed || false
    };
  } catch (error) {
    console.error(`[${clientId}] Erro ao gerar QR Code:`, error);
    return {
      success: false,
      error: error.message || 'Erro ao gerar QR Code'
    };
  }
};

/**
 * Obt√©m o status da conex√£o atual para um cliente espec√≠fico
 * @param {string} clientId - Identificador do cliente
 */
const getConnectionStatus = (clientId = 'default') => {
  if (!instances[clientId]) {
    return {
      success: false,
      error: `Cliente ${clientId} n√£o encontrado`
    };
  }
  
  // Ler metadados para incluir informa√ß√µes adicionais
  const metadata = readInstanceMetadata(clientId);
  
  return {
    success: true,
    connected: instances[clientId].isConnected,
    status: instances[clientId].connectionStatus,
    clientId,
    lastStatusChange: metadata.lastConnection || metadata.lastDisconnection || metadata.lastQRTimestamp,
    qrTimestamp: instances[clientId].qrTimestamp,
    hasQrCode: !!instances[clientId].qrText,
    autoRenewed: metadata.status === 'qr_expired' && metadata.autoReinitializing
  };
};

/**
 * Desconecta do WhatsApp para um cliente espec√≠fico
 * @param {string} clientId - Identificador do cliente
 */
const logout = async (clientId = 'default') => {
  try {
    if (!instances[clientId] || !instances[clientId].sock) {
      return {
        success: false,
        error: `Nenhuma conex√£o ativa para o cliente ${clientId}`
      };
    }
    
    console.log(`[${clientId}] Iniciando logout...`);
    
    // Salvar configura√ß√µes atuais antes do logout
    const currentConfig = {
      ignoreGroups: instances[clientId].ignoreGroups,
      webhookUrl: instances[clientId].webhookUrl,
      proxyUrl: instances[clientId].proxyUrl
    };
    
    // Logout do WhatsApp
    await instances[clientId].sock.logout();
    
    // Atualizar metadados
    saveInstanceMetadata(clientId, {
      status: 'logged_out',
      logoutTime: new Date().toISOString(),
      logoutType: 'manual'
    }, true);
    
    // Limpar vari√°veis
    instances[clientId].isConnected = false;
    instances[clientId].connectionStatus = 'logged_out';
    instances[clientId].qrText = '';
    
    console.log(`[${clientId}] Logout realizado com sucesso, reinicializando conex√£o...`);
    
    // Aguardar um momento para garantir que o logout foi processado
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // Reinicializar automaticamente com as mesmas configura√ß√µes
    try {
      await initializeWhatsApp(clientId, currentConfig);
      console.log(`[${clientId}] Nova conex√£o inicializada ap√≥s logout`);
      
      return {
        success: true,
        message: `Cliente ${clientId} desconectado com sucesso e nova conex√£o inicializada`,
        timestamp: new Date().toISOString(),
        autoReconnected: true
      };
    } catch (reconnectError) {
      console.error(`[${clientId}] Erro ao reinicializar ap√≥s logout:`, reconnectError);
      
      return {
        success: true,
        message: `Cliente ${clientId} desconectado com sucesso, mas houve erro na reinicializa√ß√£o`,
        timestamp: new Date().toISOString(),
        autoReconnected: false,
        reconnectError: reconnectError.message
      };
    }
    
  } catch (error) {
    console.error(`[${clientId}] Erro ao desconectar:`, error);
    
    // Salvar erro nos metadados
    saveInstanceMetadata(clientId, {
      lastError: error.message,
      lastErrorTime: new Date().toISOString()
    });
    
    return {
      success: false,
      error: error.message || 'Erro ao desconectar'
    };
  }
};

/**
 * Reinicia a conex√£o com o WhatsApp para um cliente espec√≠fico
 * @param {string} clientId - Identificador do cliente
 */
const restartConnection = async (clientId = 'default') => {
  try {
    // Desconectar primeiro se estiver conectado
    if (instances[clientId] && instances[clientId].sock) {
      await instances[clientId].sock.close();
    }
    
    // Reiniciar a conex√£o
    await initializeWhatsApp(clientId);
    
    return {
      success: true,
      message: `Conex√£o do cliente ${clientId} reiniciada com sucesso`
    };
  } catch (error) {
    console.error(`[${clientId}] Erro ao reiniciar conex√£o:`, error);
    return {
      success: false,
      error: error.message || 'Erro ao reiniciar conex√£o'
    };
  }
};

/**
 * Remove uma inst√¢ncia espec√≠fica e limpa os recursos associados
 * @param {string} clientId - Identificador do cliente
 */
const deleteInstance = async (clientId = 'default') => {
  try {
    if (!instances[clientId]) {
      return {
        success: false,
        error: `Inst√¢ncia para o cliente ${clientId} n√£o encontrada`
      };
    }
    
    // Desconectar a inst√¢ncia se estiver conectada
    if (instances[clientId].sock) {
      try {
        // Tentar fazer logout antes de deletar
        await instances[clientId].sock.logout().catch(() => {});
        await instances[clientId].sock.close().catch(() => {});
      } catch (logoutError) {
        console.error(`[${clientId}] Erro ao desconectar durante exclus√£o:`, logoutError);
        // Continue com a exclus√£o mesmo se o logout falhar
      }
    }
    
    // Remover a inst√¢ncia do objeto de inst√¢ncias
    delete instances[clientId];
    
    // Opcional: Remover diret√≥rio de sess√£o se necess√°rio
    const SESSION_PATH = path.join(SESSION_DIR, clientId);
    if (fs.existsSync(SESSION_PATH)) {
      fs.rmSync(SESSION_PATH, { recursive: true, force: true });
    }
    
    return {
      success: true,
      message: `Inst√¢ncia para cliente ${clientId} removida com sucesso`
    };
  } catch (error) {
    console.error(`[${clientId}] Erro ao deletar inst√¢ncia:`, error);
    return {
      success: false,
      error: error.message || 'Erro ao deletar inst√¢ncia'
    };
  }
};

/**
 * Atualiza as configura√ß√µes de uma inst√¢ncia
 * @param {string} clientId - Identificador do cliente
 * @param {object} config - Configura√ß√µes a serem atualizadas
 * @returns {object} - Resultado da atualiza√ß√£o
 */
const updateInstanceConfig = (clientId = 'default', config = {}) => {
  try {
    if (!instances[clientId]) {
      return {
        success: false,
        error: `Cliente ${clientId} n√£o encontrado`
      };
    }
    
    // Atualizar apenas as configura√ß√µes fornecidas
    let configChanged = false;
    let proxyChanged = false;
    
    if (config.ignoreGroups !== undefined) {
      instances[clientId].ignoreGroups = !!config.ignoreGroups;
      configChanged = true;
    }
    
    if (config.webhookUrl !== undefined) {
      instances[clientId].webhookUrl = config.webhookUrl;
      configChanged = true;
    }
    
    if (config.proxyUrl !== undefined) {
      const oldProxyUrl = instances[clientId].proxyUrl || '';
      const newProxyUrl = config.proxyUrl || '';
      
      if (oldProxyUrl !== newProxyUrl) {
        instances[clientId].proxyUrl = newProxyUrl;
        configChanged = true;
        proxyChanged = true;
        console.log(`[${clientId}] Proxy URL alterado de "${oldProxyUrl}" para "${newProxyUrl}"`);
      }
    }
    
    // For√ßar o salvamento imediato dos metadados quando as configura√ß√µes s√£o alteradas
    if (configChanged) {
      // Salvar metadados com for√ßa=true para ignorar throttling
      saveInstanceMetadata(clientId, {
        ignoreGroups: instances[clientId].ignoreGroups,
        webhookUrl: instances[clientId].webhookUrl,
        proxyUrl: instances[clientId].proxyUrl,
        configUpdatedAt: new Date().toISOString()
      }, true);
      
      console.log(`[${clientId}] Configura√ß√µes atualizadas e salvas imediatamente`);
    }
    
    return {
      success: true,
      message: `Configura√ß√µes do cliente ${clientId} atualizadas com sucesso`,
      proxyChanged: proxyChanged,
      reconnectionRecommended: proxyChanged,
      config: {
        ignoreGroups: instances[clientId].ignoreGroups,
        webhookUrl: instances[clientId].webhookUrl,
        proxyUrl: instances[clientId].proxyUrl
      }
    };
  } catch (error) {
    return {
      success: false,
      error: error.message || 'Erro ao atualizar configura√ß√µes'
    };
  }
};

module.exports = {
  initializeWhatsApp,
  sendTextMessage,
  sendMediaMessage,
  sendAudioMessage,
  getQrCode,
  getConnectionStatus,
  logout,
  restartConnection,
  getActiveInstances,
  deleteInstance,
  loadExistingSessions,
  checkNumberExists,
  validatePhoneNumber,
  updateInstanceConfig,
  sendToWebhook
};
