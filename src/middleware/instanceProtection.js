/**
 * Middleware de prote√ß√£o de inst√¢ncias
 * Detecta e previne problemas que podem causar exclus√£o acidental de inst√¢ncias
 */

const { getLogger } = require('../config/logger');
const logger = getLogger('instance-protection');

/**
 * Middleware para logar todas as opera√ß√µes relacionadas a inst√¢ncias
 */
const logInstanceOperations = (req, res, next) => {
  const { method, path, body, query } = req;
  const clientId = body?.clientId || query?.clientId || 'default';
  
  // Log detalhado para opera√ß√µes cr√≠ticas
  if (path.includes('/instance/') || path.includes('/send/') || path.includes('/qr')) {
    logger.info(`üîç Opera√ß√£o detectada`, {
      method,
      path,
      clientId,
      ip: req.ip,
      userAgent: req.get('User-Agent'),
      timestamp: new Date().toISOString()
    });
  }
  
  // Hook no response para detectar erros
  const originalSend = res.send;
  res.send = function(data) {
    try {
      const responseData = typeof data === 'string' ? JSON.parse(data) : data;
      
      // Detectar respostas de erro que podem indicar problemas
      if (responseData?.success === false) {
        logger.warn(`‚ö†Ô∏è  Resposta de erro detectada`, {
          method,
          path,
          clientId,
          error: responseData.error,
          ip: req.ip
        });
      }
      
      // Detectar opera√ß√µes de exclus√£o bem-sucedidas
      if (path.includes('/instance/delete') && responseData?.success === true) {
        logger.info(`üóëÔ∏è  Inst√¢ncia deletada com sucesso`, {
          clientId,
          message: responseData.message,
          ip: req.ip
        });
      }
      
    } catch (parseError) {
      // Ignorar erros de parse do JSON
    }
    
    return originalSend.call(this, data);
  };
  
  next();
};

/**
 * Middleware para validar se clientId existe antes de opera√ß√µes cr√≠ticas
 */
const validateInstanceExists = (req, res, next) => {
  const { path, method } = req;
  
  // Aplicar apenas em rotas que modificam inst√¢ncias
  const criticalPaths = ['/send/', '/logout', '/restart', '/instance/config'];
  const isCriticalPath = criticalPaths.some(p => path.includes(p));
  
  if (isCriticalPath && method === 'POST') {
    const clientId = req.body?.clientId || 'default';
    
    // Verificar se a inst√¢ncia existe antes de prosseguir
    try {
      const whatsappService = require('../services/whatsappService');
      const instances = whatsappService.getActiveInstances();
      const instanceExists = instances.some(i => i.id === clientId);
      
      if (!instanceExists) {
        logger.warn(`üö´ Tentativa de opera√ß√£o em inst√¢ncia inexistente`, {
          path,
          method,
          clientId,
          ip: req.ip
        });
        
        return res.status(404).json({
          success: false,
          error: `Inst√¢ncia ${clientId} n√£o encontrada. Inicialize a inst√¢ncia primeiro.`,
          code: 'INSTANCE_NOT_FOUND'
        });
      }
      
    } catch (error) {
      logger.error('Erro ao validar exist√™ncia da inst√¢ncia:', error);
      // Continuar mesmo com erro na valida√ß√£o
    }
  }
  
  next();
};

/**
 * Middleware para rate limiting espec√≠fico por inst√¢ncia
 */
const instanceRateLimit = (req, res, next) => {
  const clientId = req.body?.clientId || req.query?.clientId || 'default';
  
  // Implementar rate limiting b√°sico por inst√¢ncia se necess√°rio
  // Por enquanto, apenas log
  logger.debug(`Rate limit check para inst√¢ncia: ${clientId}`, {
    path: req.path,
    method: req.method
  });
  
  next();
};

module.exports = {
  logInstanceOperations,
  validateInstanceExists,
  instanceRateLimit
}; 